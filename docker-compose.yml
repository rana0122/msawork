version: '2'

services:
  # RabbitMQ는 가장 먼저 실행되어야 하므로 첫 번째로 정의합니다.
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    networks:
      - ecommerce-network
    ports:
      - "15672:15672"
      - "5672:5672"
      - "15671:15671"
      - "5671:5671"
      - "4369:4369"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    depends_on: []

  # Config Service는 RabbitMQ에 의존하므로, RabbitMQ가 실행된 후 실행되어야 합니다.
  config-service:
    image: soohyeonkim/config-service:1.0
    container_name: config-service
    networks:
      - ecommerce-network
    ports:
      - "8888:8888"
    environment:
      spring.rabbitmq.host: rabbitmq
      spring.profiles.active: default
    depends_on:
      - rabbitmq

  # Discovery Service는 Config Service에 의존하므로, Config Service가 실행된 후 실행되어야 합니다.
  discovery-service:
    image: soohyeonkim/discovery-service:1.0
    container_name: discovery-service
    networks:
      - ecommerce-network
    ports:
      - "8761:8761"
    environment:
      spring.cloud.config.uri: http://config-service:8888
    command: ["sh", "-c", "wait-for-it config-service:8888 --timeout=60 -- java -jar discovery-service.jar"]
    depends_on:
      - config-service

  # Gateway Service는 Discovery Service에 의존하므로, Discovery Service가 실행된 후 실행되어야 합니다.
  gateway-service:
    image: soohyeonkim/gateway-service:1.0
    container_name: gateway-service
    networks:
      - ecommerce-network
    ports:
      - "8000:8000"
    environment:
      spring.cloud.config.uri: http://config-service:8888
      spring.rabbitmq.host: rabbitmq
      eureka.client.serviceUrl.defaultZone: http://discovery-service:8761/eureka/
    command: ["sh", "-c", "wait-for-it discovery-service:8761 -- java -jar gateway-service.jar"]
    depends_on:
      - discovery-service

  # MariaDB는 독립적으로 실행될 수 있습니다.
  mariadb:
    image: soohyeonkim/my_mariadb:1.0
    container_name: mariadb
    networks:
      - ecommerce-network
    ports:
      - "3306:3306"
    depends_on:
      - gateway-service

  # Zookeeper는 Kafka가 의존하므로, Kafka가 실행되기 전에 시작되어야 합니다.
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: kafka-docker-zookeeper-1
    ports:
      - "2181:2181"
    networks:
      ecommerce-network:
        ipv4_address: 172.18.0.100  # Zookeeper에 고정된 IP 주소 할당
    depends_on:
      - mariadb

  # Kafka는 Zookeeper가 실행된 후에 시작되어야 합니다.
  kafka:
    image: wurstmeister/kafka
    container_name: kafka-docker-kafka-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 172.18.0.101
      KAFKA_CREATE_TOPICS: "test:1:1"
      KAFKA_ZOOKEEPER_CONNECT: kafka-docker-zookeeper-1:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Docker 소켓 공유 (optional)
    depends_on:
      - zookeeper
    networks:
      ecommerce-network:
        ipv4_address: 172.18.0.101  # Kafka에 고정된 IP 주소 할당

  # Zipkin은 독립적으로 실행될 수 있습니다.
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    networks:
      - ecommerce-network
    ports:
      - "9411:9411"
    depends_on:
      - kafka

  # Prometheus는 독립적으로 실행될 수 있습니다.
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    networks:
      - ecommerce-network
    ports:
      - "9090:9090"
    volumes:
      - D:/work/prometheus-2.53.3.windows-amd64/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - zipkin

  # Grafana는 Prometheus에 의존하므로, Prometheus가 실행된 후 실행되어야 합니다.
  grafana:
    image: grafana/grafana
    container_name: grafana
    networks:
      - ecommerce-network
    ports:
      - "3001:3000"
    depends_on:
      - prometheus

  # User Service는 Config Service와 RabbitMQ에 의존하므로 먼저 Config Service와 RabbitMQ가 실행되어야 합니다.
  user-service:
    image: soohyeonkim/user-service:1.0
    container_name: user-service
    networks:
      - ecommerce-network
    environment:
      spring.cloud.config.uri: http://config-service:8888
      spring.rabbitmq.host: rabbitmq
      spring.zipkin.base-url: http://zipkin:9411
      eureka.client.serviceUrl.defaultZone: http://discovery-service:8761/eureka/
      logging.file: /api-logs/users-ws.log
    command: ["sh", "-c", "wait-for-it rabbitmq:5672 --wait-for-it config-service:8888 --wait-for-it discovery-service:8761 --timeout=60 -- java -jar user-service.jar"]
    depends_on:
      - discovery-service
      - config-service
      - rabbitmq

  # Order Service는 User Service와 Discovery Service에 의존하므로 먼저 User Service와 Discovery Service가 실행되어야 합니다.
  order-service:
    image: soohyeonkim/order-service:1.0
    container_name: order-service
    networks:
      - ecommerce-network
    environment:
      spring.zipkin.base-url: http://zipkin:9411
      eureka.client.serviceUrl.defaultZone: http://discovery-service:8761/eureka/
      spring.datasource.url: jdbc:mariadb://mariadb:3306/mydb
      logging.file: /api-logs/orders-ws.log
    command: ["sh", "-c", "wait-for-it user-service:8080 --wait-for-it discovery-service:8761 -- java -jar order-service.jar"]
    depends_on:
      - user-service

  # Catalog Service는 Discovery Service에 의존하므로 Discovery Service가 먼저 실행되어야 합니다.
  catalog-service:
    image: soohyeonkim/catalog-service:1.0
    container_name: catalog-service
    networks:
      - ecommerce-network
    environment:
      eureka.client.serviceUrl.defaultZone: http://discovery-service:8761/eureka/
      logging.file: /api-logs/catalogs-ws.log
    depends_on:
      - order-service

# 네트워크 설정
networks:
  ecommerce-network:
    name: ecommerce-network  # 네트워크 이름 명시적으로 지정
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
          gateway: 172.18.0.1
